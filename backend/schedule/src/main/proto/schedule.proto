syntax = "proto3";

package schedule;

option java_multiple_files = true;
option java_package = "com.mapzip.schedule.grpc";
option java_outer_classname = "ScheduleProto";

// ===============================================================
// 1. 서비스 정의 (Service Definition)
// ===============================================================

service ScheduleService {
  // 스케줄 생성
  rpc CreateSchedule(CreateScheduleRequest) returns (CreateScheduleResponse);
  // 맛집 추천 결과 조회
  rpc GetRecommendationResults(GetRecommendationResultsRequest) returns (GetRecommendationResultsResponse);
  // 스케줄 목록 조회
  rpc GetScheduleList(GetScheduleListRequest) returns (GetScheduleListResponse);
  // 특정 스케줄 상세 조회
  rpc GetScheduleDetail(GetScheduleDetailRequest) returns (GetScheduleDetailResponse);
  // 맛집 선택 반영
  rpc SelectRestaurant(SelectRestaurantRequest) returns (SelectRestaurantResponse);
  // 스케줄 정보 업데이트 (수동 새로고침)
  rpc RefreshSchedule(RefreshScheduleRequest) returns (RefreshScheduleResponse);
}

// ===============================================================
// 2. 공통 메시지 타입 (Common Message Types)
// ===============================================================

message Location {
  double lat = 1;
  double lng = 2;
  string name = 3;
  string address = 4;
}

message Waypoint {
  double lat = 1;
  double lng = 2;
  string name = 3;
}

message MealTimeSlot {
  string slot_id = 1;          // 고유 슬롯 ID
  MealType meal_type = 2;      // 식사/간식 구분
  string scheduled_time = 3;   // 예정 시간 (예: "오후 12:30")
  int32 radius = 4;           // 검색 반경 (미터, 기본값: 1000)
}

enum MealType {
  MEAL = 0;    // 식사
  SNACK = 1;   // 간식
}

message MealLocation {
  string slot_id = 1;
  double lat = 2;
  double lng = 3;
  string scheduled_time = 4; // 예정 시간
}

message RestaurantRecommendation {
  string id = 1;
  string name = 2;
  string category = 3;
  string phone = 4;
  string address = 5;
  string road_address = 6;
  double lat = 7;
  double lng = 8;
  string detail_url = 9;
  int32 distance = 10; // 예상 식사 지점으로부터의 거리(미터)
  string rating = 11;  // 추천서버에서 분석한 평점
  string menu_info = 12; // 추천서버에서 분석한 메뉴 정보
}

message SelectedRestaurant {
  string slot_id = 1;          // 시간 슬롯 ID
  string restaurant_id = 2;    // 맛집 ID
  string name = 3;
  string scheduled_time = 4;   // 예정 시간
  string detail_url = 5;
}

message MealSlotRecommendation {
  string slot_id = 1;
  MealType meal_type = 2;
  string scheduled_time = 3;
  RecommendationStatus status = 4;
  repeated RestaurantRecommendation recommendations = 5;
  string message = 6;
}

enum RecommendationStatus {
  PROCESSING = 0;    // 처리 중
  COMPLETED = 1;     // 완료
  FAILED = 2;        // 실패
}

message ScheduleError {
  ErrorType type = 1;
  string message = 2;
  string retry_after = 3;  // API 제한일 때만
}

enum ErrorType {
  TMAP_API_FAILED = 0;
  KAKAO_API_FAILED = 1;
  INVALID_ROUTE = 2;        // 비현실적인 경로
  NO_RESTAURANTS_FOUND = 3;
  RECOMMENDATION_SERVICE_UNAVAILABLE = 4;
  REFRESH_RATE_LIMITED = 5; // 새로고침 제한
}


// ===============================================================
// 3. API별 요청/응답 메시지 (API-specific Messages)
// ===============================================================

// 3.1 스케줄 생성
message CreateScheduleRequest {
  string user_id = 1;
  string title = 2;
  string departure_time = 3;
  string arrival_time = 11; // 추가
  repeated MealTimeSlot meal_slots = 4;
  Location departure = 5;
  repeated Waypoint waypoints = 6;
  Location destination = 7;
  string user_note = 8;
  string purpose = 9;
  repeated string companions = 10;
}

message CreateScheduleResponse {
  string schedule_id = 1;
  string message = 2;
  bool success = 3;
  repeated string recommendation_request_ids = 4;
  string calculated_arrival_time = 5;
  ScheduleError error = 6;
}

// 3.2 맛집 추천 결과 조회
message GetRecommendationResultsRequest {
  string schedule_id = 1;
  string user_id = 2;
}

message GetRecommendationResultsResponse {
  repeated MealSlotRecommendation slot_recommendations = 1;
}

// 3.3 스케줄 목록 조회
message GetScheduleListRequest {
  string user_id = 1;
}

message GetScheduleListResponse {
  message ScheduleSummary {
    string schedule_id = 1;
    string title = 2;
    string departure_time = 3;
    string destination_name = 4;
    int32 total_meal_slots = 5;
    int32 selected_restaurants_count = 6;
  }
  repeated ScheduleSummary schedules = 1;
}

// 3.4 특정 스케줄 상세 조회
message GetScheduleDetailRequest {
  string schedule_id = 1;
  string user_id = 2;
}

message GetScheduleDetailResponse {
  message ScheduleDetail {
    string title = 1;
    string departure_time = 2;
    string calculated_arrival_time = 3;
    repeated MealTimeSlot meal_slots = 4;
    Location departure = 5;
    repeated Waypoint waypoints = 6;
    Location destination = 7;
    string user_note = 8;
    string purpose = 9;
    repeated string companions = 10;
    repeated SelectedRestaurant selected_restaurants = 11;
  }
  ScheduleDetail schedule = 1;
}

// 3.5 맛집 선택 반영
message SelectRestaurantRequest {
  string schedule_id = 1;
  string slot_id = 2;
  string restaurant_id = 3;
  string user_id = 4;
  string name = 5;
  string detail_url = 6;
}

message SelectRestaurantResponse {
  string message = 1;
  SelectedRestaurant selected_restaurant = 2;
  bool success = 3;
}

// 3.6 스케줄 정보 업데이트
message RefreshScheduleRequest {
  string schedule_id = 1;
  string user_id = 2;
}

message RefreshScheduleResponse {
  repeated string recommendation_request_ids = 1;
  string calculated_arrival_time = 2;
  bool success = 3;
  ScheduleError error = 4;
  string next_refresh_available_time = 5;
}
