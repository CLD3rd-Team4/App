# Review 서비스 설정 (EKS 환경 기본)

server:
  port: ${SERVER_PORT:8080}

spring:
  application:
    name: review
    
  # DynamoDB 연결 (IRSA 사용으로 자격증명 불필요)
  dynamodb:
    table-name: ${DYNAMODB_TABLE_NAME}
    endpoint: ${DYNAMODB_ENDPOINT:}
    region: ${AWS_REGION:ap-northeast-2}
    
  # S3 설정 (IRSA 사용으로 자격증명 불필요)
  s3:
    bucket: ${S3_BUCKET_NAME}
    region: ${AWS_REGION:ap-northeast-2}
    
  # MSK Kafka 설정 (main 클러스터) - 환경변수 필수
  kafka:
    bootstrap-servers: ${MSK_BOOTSTRAP_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: ${KAFKA_PRODUCER_ACKS:all}
      retries: ${KAFKA_PRODUCER_RETRIES:3}
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      group-id: review-service-${ENVIRONMENT:prod}
      auto-offset-reset: ${KAFKA_CONSUMER_OFFSET_RESET:earliest}
      
  # Multipart 설정 (환경별 다른 값)
  servlet:
    multipart:
      max-file-size: ${MULTIPART_MAX_FILE_SIZE:10MB}
      max-request-size: ${MULTIPART_MAX_REQUEST_SIZE:20MB}
      
  jackson:
    default-property-inclusion: NON_NULL

# gRPC Configuration  
grpc:
  server:
    port: ${GRPC_SERVER_PORT:50051}
  client:
    GLOBAL:
      negotiation-type: plaintext

# Google Cloud Vision API
google:
  cloud:
    vision:
      api-key: '{cipher}${GOOGLE_CLOUD_VISION_API_KEY}'

# Kubernetes 서비스 디스커버리 활성화
spring:
  cloud:
    kubernetes:
      discovery:
        enabled: true

# Eureka 비활성화
eureka:
  client:
    enabled: false

# Management & Health Check
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: ${HEALTH_SHOW_DETAILS:always}
      probes:
        enabled: true
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  metrics:
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
      slo:
        http.server.requests: 100ms,200ms,500ms,1s,2s
    tags:
      application: ${spring.application.name}
      environment: ${ENVIRONMENT:prod}
      region: ${AWS_REGION:ap-northeast-2}
    export:
      prometheus:
        enabled: true

# Logging Configuration (환경별 다른 레벨)
logging:
  level:
    com.mapzip.review: ${LOG_LEVEL_REVIEW:INFO}
    software.amazon.awssdk: ${LOG_LEVEL_AWS:WARN}
    com.google.cloud: ${LOG_LEVEL_GOOGLE:WARN}
    org.springframework.kafka: ${LOG_LEVEL_KAFKA:INFO}

# Review Service Specific Settings
review:
  ocr:
    confidence-threshold: ${OCR_CONFIDENCE_THRESHOLD:0.6}
    max-retry-attempts: ${OCR_MAX_RETRY:3}
  image:
    max-file-size: ${IMAGE_MAX_SIZE:10MB}
    allowed-types: ${IMAGE_ALLOWED_TYPES:image/jpeg,image/png,image/jpg}
  pagination:
    default-size: ${PAGINATION_DEFAULT_SIZE:20}
    max-size: ${PAGINATION_MAX_SIZE:100}