# Review 서비스 설정 (EKS 환경 기본)

server:
  port: ${SERVER_PORT:8080}

spring:
  application:
    name: review
    
  # 파일 업로드 설정 (리뷰 이미지)
  servlet:
    multipart:
      max-file-size: ${MAX_FILE_SIZE:10MB}
      max-request-size: ${MAX_REQUEST_SIZE:50MB}
      
  # Kubernetes 서비스 디스커버리 활성화
  cloud:
    kubernetes:
      discovery:
        enabled: true
        
  # Valkey 캐싱 설정 (ElastiCache 운영 환경)
  data:
    valkey:
      host: ${REDIS_HOST:review-cache.mapzip.shop}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}  # AUTH 비활성화됨
      database: ${REDIS_DATABASE:0}
      timeout: ${REDIS_TIMEOUT:3000ms}
      ssl: false
      lettuce:
        pool:
          max-active: ${REDIS_POOL_MAX_ACTIVE:16}
          max-idle: ${REDIS_POOL_MAX_IDLE:16}
          min-idle: ${REDIS_POOL_MIN_IDLE:4}
          max-wait: ${REDIS_POOL_MAX_WAIT:3000ms}
          
  # 캐시 설정
  cache:
    type: valkey
    valkey:
      time-to-live: ${CACHE_DEFAULT_TTL:1800000}  # 기본 30분 TTL (밀리초)
      cache-null-values: false
      
  jackson:
    default-property-inclusion: NON_NULL

# gRPC 설정
grpc:
  server:
    port: ${GRPC_SERVER_PORT:50051}
  client:
    GLOBAL:
      negotiation-type: plaintext

# AWS 설정
aws:
  region: ${AWS_REGION:ap-northeast-2}
  
  # DynamoDB 연결 (IRSA 사용으로 자격증명 불필요)
  dynamodb:
    table-name: ${DYNAMODB_TABLE_NAME:mapzip-${TERRAFORM_WORKSPACE:dev}-review}
    endpoint: ${DYNAMODB_ENDPOINT:}
    region: ${AWS_REGION:ap-northeast-2}
    
  # S3 설정 (IRSA 사용으로 자격증명 불필요)
  s3:
    bucket-name: ${S3_BUCKET_NAME:mapzip-${TERRAFORM_WORKSPACE:dev}-image}  # 실제 S3 버킷 이름 (terraform main.tf 참조)
    region: ${AWS_REGION:ap-northeast-2}
    presign-duration: ${S3_PRESIGN_DURATION:PT1H}  # Pre-signed URL 유효시간 (1시간)
    cloudfront-domain: ${CLOUDFRONT_IMAGE_DOMAIN:https://img.mapzip.shop}  # CloudFront 배포 도메인 (terraform main.tf line 213 참조)
    
  # MSK Kafka 설정 (main 클러스터) - 환경변수 필수
  kafka:
    bootstrap-servers: ${MSK_BOOTSTRAP_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: ${KAFKA_PRODUCER_ACKS:all}
      retries: ${KAFKA_PRODUCER_RETRIES:3}
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      group-id: review-service-${ENVIRONMENT:prod}
      auto-offset-reset: ${KAFKA_CONSUMER_OFFSET_RESET:earliest}

# Google Cloud Vision API (Config Server 암호화 방식)
google:
  cloud:
    vision:
      # 서비스 계정 키 JSON 전체를 암호화하여 저장
      api-key: '{cipher}2a049919aabe8d3e61176c877535db0153d24bd98a3afa80145ac1d4d530326dff5b2c6fae218f616b9761a68aef53dd551d5efeb4c299e6fe5b4d4246f42a02'
      # 이거아니면 또는 Kubernetes Secret을 통한 파일 경로 방식도 가능
      # credentials-path: ${GOOGLE_APPLICATION_CREDENTIALS:/var/secrets/google/service-account-key.json}

# Eureka 비활성화
eureka:
  client:
    enabled: false

# Management & Health Check
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: ${HEALTH_SHOW_DETAILS:always}
      probes:
        enabled: true
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  metrics:
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
      slo:
        http.server.requests: 100ms,200ms,500ms,1s,2s
    tags:
      application: ${spring.application.name}
      environment: ${ENVIRONMENT:prod}
      region: ${AWS_REGION:ap-northeast-2}
    export:
      prometheus:
        enabled: true

# 로깅 설정
logging:
  level:
    com.mapzip.review: ${LOG_LEVEL_REVIEW:INFO}
    software.amazon.awssdk: ${LOG_LEVEL_AWS:WARN}
    com.google.cloud: ${LOG_LEVEL_GOOGLE:WARN}
    org.springframework.kafka: ${LOG_LEVEL_KAFKA:INFO}

# Review Service Specific Settings
review:
  ocr:
    confidence-threshold: ${OCR_CONFIDENCE_THRESHOLD:0.6}
    max-retry-attempts: ${OCR_MAX_RETRY:3}
  image:
    max-file-size: ${IMAGE_MAX_SIZE:10MB}
    allowed-formats: ${IMAGE_ALLOWED_FORMATS:jpg,jpeg,png,webp}
  pagination:
    default-size: ${PAGINATION_DEFAULT_SIZE:20}
    max-size: ${PAGINATION_MAX_SIZE:100}
  cache:
    user-reviews-ttl: ${CACHE_USER_REVIEWS_TTL:7200}       # 2시간 (운영환경 증가)
    restaurant-reviews-ttl: ${CACHE_RESTAURANT_REVIEWS_TTL:14400}  # 4시간
    review-stats-ttl: ${CACHE_REVIEW_STATS_TTL:43200}      # 12시간
    ocr-results-ttl: ${CACHE_OCR_RESULTS_TTL:172800}       # 48시간 (운영환경 증가)
    recommendation-ttl: ${CACHE_RECOMMENDATION_TTL:21600}   # 6시간
