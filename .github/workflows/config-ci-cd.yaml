name: Config CI/CD

on:
  push:
    branches:
      - dev
    paths:
      - 'config-repo/**'

permissions:
  id-token: write
  contents: read

jobs:
  detect-config-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.detect.outputs.services }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed config services
        id: detect
        run: |
          git fetch origin dev
          
          # Backend Î≥ÄÍ≤ΩÏÇ¨Ìï≠ÎèÑ ÌôïÏù∏ (Ï§ëÎ≥µ Ïû¨ÏãúÏûë Î∞©ÏßÄ)
          BACKEND_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^backend/' | cut -d '/' -f2 | sort | uniq)
          
          # config-repo/application.yml Î≥ÄÍ≤Ω ÌôïÏù∏
          APPLICATION_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^config-repo/application\.yml$' | wc -l)
          
          # config-repo/ Ìè¥ÎçîÏóêÏÑú Î≥ÄÍ≤ΩÎêú Í∞úÎ≥Ñ ÏÑ§Ï†ï ÌååÏùºÎì§ Ï∞æÍ∏∞
          CONFIG_SERVICES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^config-repo/.*\.yml$' | grep -v '^config-repo/application\.yml$' | sed 's|config-repo/||g' | sed 's|\.yml||g' | sort | uniq)
          
          # application.ymlÏù¥ Î∞îÎÄåÎ©¥ Î™®Îì† ÏÑúÎπÑÏä§ Ïû¨ÏãúÏûë
          if [ "$APPLICATION_CHANGED" -gt 0 ]; then
            ALL_SERVICES="auth gateway schedule recommend review"
          else
            # Í∑∏Î†áÏßÄ ÏïäÏúºÎ©¥ Î≥ÄÍ≤ΩÎêú ÏÑúÎπÑÏä§Îì§Îßå
            ALL_SERVICES="$CONFIG_SERVICES"
          fi
          
          # BackendÏóêÏÑú Î≥ÄÍ≤ΩÎêú ÏÑúÎπÑÏä§Îäî Ï†úÏô∏ (ArgoCDÍ∞Ä ÏûêÎèô Ïû¨Î∞∞Ìè¨ÌïòÎØÄÎ°ú)
          FILTERED_SERVICES=""
          for service in $ALL_SERVICES; do
            if ! echo "$BACKEND_CHANGED" | grep -q "^$service$"; then
              FILTERED_SERVICES="$FILTERED_SERVICES $service"
            else
              echo "‚è≠Ô∏è Skipping $service restart (backend changed - ArgoCD will handle deployment)"
            fi
          done
          
          # JSON Î∞∞Ïó¥Î°ú Î≥ÄÌôò
          CHANGED=$(echo "$FILTERED_SERVICES" | tr ' ' '\n' | sort | uniq | jq -R -s -c 'split("\n") | map(select(. != ""))')
          echo "services=$CHANGED" >> $GITHUB_OUTPUT
          echo "üîÑ Services to restart: $FILTERED_SERVICES"

  restart-services:
    needs: detect-config-changes
    runs-on: ubuntu-latest
    if: ${{ fromJson(needs.detect-config-changes.outputs.services) != '[]' }}
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-config-changes.outputs.services) }}
      fail-fast: false
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/mapzip-dev-GitHubActionsOIDCRole
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ap-northeast-2

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ap-northeast-2 --name mapzip-dev-eks

      - name: Restart ${{ matrix.service }} service
        run: |
          SERVICE="${{ matrix.service }}"
          echo "üîÑ Restarting $SERVICE service (config-only change)..."
          
          # ÏÑúÎπÑÏä§Î≥Ñ deployment Ïù¥Î¶ÑÍ≥º ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ Îß§Ìïë
          case $SERVICE in
            "auth")
              DEPLOYMENT="auth-deployment"
              NAMESPACE="service-platform"
              ;;
            "gateway")
              DEPLOYMENT="spring-gateway-deployment"
              NAMESPACE="service-platform"
              ;;
            "schedule")
              DEPLOYMENT="schedule-deployment"
              NAMESPACE="service-schedule"
              ;;
            "recommend")
              DEPLOYMENT="recommend-deployment"
              NAMESPACE="service-recommend"
              ;;
            "review")
              DEPLOYMENT="review-deployment"
              NAMESPACE="service-review"
              ;;
            *)
              echo "‚ùå Unknown service: $SERVICE"
              exit 1
              ;;
          esac
          
          kubectl rollout restart deployment/$DEPLOYMENT -n $NAMESPACE
          kubectl rollout status deployment/$DEPLOYMENT -n $NAMESPACE --timeout=300s
          
          echo "‚úÖ $SERVICE service restarted successfully in $NAMESPACE namespace"
