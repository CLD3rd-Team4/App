name: Config Server CI/CD

on:
  push:
    branches: [ dev ]
    paths:
      - 'backend/config/config-server/**'
  pull_request:
    branches: [ dev ]
    paths:
      - 'backend/config/config-server/**'

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: mapzip/config-server
  EKS_CLUSTER_NAME: mapzip-dev-eks  # Terraform workspace가 'dev'이므로

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x backend/config/config-server/gradlew

    - name: Run tests
      run: |
        cd backend/config/config-server
        ./gradlew test

    - name: Run security scan
      run: |
        cd backend/config/config-server
        ./gradlew dependencyCheckAnalyze || true

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Check if ECR repository exists
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend/config/config-server
        
        # Docker 이미지 빌드
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # ECR에 푸시
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Check EKS cluster exists
      run: |
        if ! aws eks describe-cluster --name $EKS_CLUSTER_NAME --region $AWS_REGION; then
          echo "❌ EKS 클러스터 '$EKS_CLUSTER_NAME'가 존재하지 않습니다."
          echo "먼저 EKS 클러스터를 생성해주세요."
          exit 1
        fi

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Create namespace if not exists
      run: |
        kubectl create namespace mapzip --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend/config/config-server/k8s
        
        # 환경 변수 치환하여 배포
        envsubst < deployment.yaml | kubectl apply -f -
        kubectl apply -f service.yaml
        kubectl apply -f configmap.yaml
        
        # 배포 상태 확인
        kubectl rollout status deployment/config-server -n mapzip --timeout=300s

    - name: Verify deployment
      run: |
        kubectl get pods -n mapzip -l app=config-server
        kubectl get services -n mapzip -l app=config-server
        
        # 서비스 엔드포인트 확인
        kubectl get service config-server-external -n mapzip -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo "LoadBalancer 생성 중..."
